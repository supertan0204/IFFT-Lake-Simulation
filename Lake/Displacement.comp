#version 430 core

layout (local_size_x = 1, local_size_y = 1) in;

layout (binding = 1, rgba32f) writeonly uniform image2DArray tex1;
layout (binding = 2, rgba32f) uniform image2DArray tex2;
layout (binding = 3, rgba32f) writeonly uniform image2DArray tex3;

uniform int pingpong;
uniform int N = 256;
uniform int which;

void main(void){
    if (which == 1){
	    ivec2 x = ivec2(gl_GlobalInvocationID.xy);

	    float perms[] = { 1.0, -1.0 };
	    int index = int(mod(int(x.x + x.y), 2));
	    float perm = perms[index];

	    if(pingpong == 0){
	        float h = imageLoad(tex2, ivec3(x, 1)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    //imageStore(tilde_disp, x, vec4(vec3(value), 1));
		    imageStore(tex1, ivec3(x, 0), vec4(vec3(value), 1));
	    }
	    else if(pingpong == 1){
	        float h = imageLoad(tex2, ivec3(x, 2)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex1, ivec3(x, 0), vec4(vec3(value), 1));
	    }
	}
	else if (which == 2){
	    ivec2 x = ivec2(gl_GlobalInvocationID.xy);

	    float perms[] = { 1.0, -1.0 };
	    int index = int(mod(int(x.x + x.y), 2));
	    float perm = perms[index];

	    if(pingpong == 0){
	        float h = imageLoad(tex2, ivec3(x, 1)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex3, ivec3(x, 0), vec4(vec3(value), 1));
	    }
	    else if(pingpong == 1){
	        float h = imageLoad(tex2, ivec3(x, 2)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex3, ivec3(x, 0), vec4(vec3(value), 1));
	    }
	}
	else if (which == 3){
	    ivec2 x = ivec2(gl_GlobalInvocationID.xy);

	    float perms[] = { 1.0, -1.0 };
	    int index = int(mod(int(x.x + x.y), 2));
	    float perm = perms[index];

	    if(pingpong == 0){
	        float h = imageLoad(tex2, ivec3(x, 1)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex3, ivec3(x, 1), vec4(vec3(value), 1));
	    }
	    else if(pingpong == 1){
	        float h = imageLoad(tex2, ivec3(x, 2)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex3, ivec3(x, 1), vec4(vec3(value), 1));
	    }
	}
	else if (which == 4){
	    ivec2 x = ivec2(gl_GlobalInvocationID.xy);

	    float perms[] = { 1.0, -1.0 };
	    int index = int(mod(int(x.x + x.y), 2));
	    float perm = perms[index];

	    if(pingpong == 0){
	        float h = imageLoad(tex2, ivec3(x, 1)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex3, ivec3(x, 2), vec4(vec3(value), 1));
	    }
	    else if(pingpong == 1){
	        float h = imageLoad(tex2, ivec3(x, 2)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex3, ivec3(x, 2), vec4(vec3(value), 1));
	    }
	}
	else if (which == 5){
	    ivec2 x = ivec2(gl_GlobalInvocationID.xy);

	    float perms[] = { 1.0, -1.0 };
	    int index = int(mod(int(x.x + x.y), 2));
	    float perm = perms[index];

	    if(pingpong == 0){
	        float h = imageLoad(tex2, ivec3(x, 1)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex3, ivec3(x, 3), vec4(vec3(value), 1));
	    }
	    else if(pingpong == 1){
	        float h = imageLoad(tex2, ivec3(x, 2)).r;
		    float value = (perm * h) / (float(N) * float(N));
		    imageStore(tex3, ivec3(x, 3), vec4(vec3(value), 1));
	    }
	}
}